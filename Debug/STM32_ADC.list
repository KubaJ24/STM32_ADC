
STM32_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800038c  08000394  00010394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800038c  0800038c  00010394  2**0
                  CONTENTS
  4 .ARM          00000000  0800038c  0800038c  00010394  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800038c  08000394  00010394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800038c  0800038c  0001038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000390  08000390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000394  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000394  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010394  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004e1  00000000  00000000  00010407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000012f  00000000  00000000  000108e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00010a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000003f  00000000  00000000  00010a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b750  00000000  00000000  00010ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005b2  00000000  00000000  0002c207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ab84  00000000  00000000  0002c7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000b8  00000000  00000000  000c7340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c73f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000374 	.word	0x08000374

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000374 	.word	0x08000374

08000208 <ADC_CONF>:

void ADC_CONF(void);
void DMA_CONF(void);
void ADC_DMA_ENABLE(void);

void ADC_CONF(void){
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	//GPIOA CLOCK ENABLE
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800020c:	4b23      	ldr	r3, [pc, #140]	; (800029c <ADC_CONF+0x94>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a22      	ldr	r2, [pc, #136]	; (800029c <ADC_CONF+0x94>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	; 0x30
	//ADC1 CLOCK ENABLE
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000218:	4b20      	ldr	r3, [pc, #128]	; (800029c <ADC_CONF+0x94>)
 800021a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800021c:	4a1f      	ldr	r2, [pc, #124]	; (800029c <ADC_CONF+0x94>)
 800021e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000222:	6453      	str	r3, [r2, #68]	; 0x44

	//PA3 ANALOG INPUT MODE
	GPIOA->MODER |= GPIO_MODER_MODER3_0 | GPIO_MODER_MODER3_1;
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <ADC_CONF+0x98>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a1d      	ldr	r2, [pc, #116]	; (80002a0 <ADC_CONF+0x98>)
 800022a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800022e:	6013      	str	r3, [r2, #0]

	//ADC PRESCALLER -> 8
	//FREQUENCY OF PCLK2 / 8 = 16MHZ / 8 = 2MHZ
	ADC->CCR |= ADC_CCR_ADCPRE_0 | ADC_CCR_ADCPRE_1;
 8000230:	4b1c      	ldr	r3, [pc, #112]	; (80002a4 <ADC_CONF+0x9c>)
 8000232:	685b      	ldr	r3, [r3, #4]
 8000234:	4a1b      	ldr	r2, [pc, #108]	; (80002a4 <ADC_CONF+0x9c>)
 8000236:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800023a:	6053      	str	r3, [r2, #4]
	//10 BIT RESOLUTION (0 - 1024)
	ADC1->CR1 |= ADC_CR1_RES_0;
 800023c:	4b1a      	ldr	r3, [pc, #104]	; (80002a8 <ADC_CONF+0xa0>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <ADC_CONF+0xa0>)
 8000242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000246:	6053      	str	r3, [r2, #4]
	//EOC ENABLED (END OF CONVERSION)
	ADC1->CR2 |= ADC_CR2_EOCS;
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <ADC_CONF+0xa0>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	4a16      	ldr	r2, [pc, #88]	; (80002a8 <ADC_CONF+0xa0>)
 800024e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000252:	6093      	str	r3, [r2, #8]
	//RIGHT DATA ALIGNMENT
	ADC1->CR2 &= ~(ADC_CR2_ALIGN);
 8000254:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <ADC_CONF+0xa0>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	4a13      	ldr	r2, [pc, #76]	; (80002a8 <ADC_CONF+0xa0>)
 800025a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800025e:	6093      	str	r3, [r2, #8]
	//SCAN MODE
	ADC1->CR1 |= ADC_CR1_SCAN;
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <ADC_CONF+0xa0>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <ADC_CONF+0xa0>)
 8000266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800026a:	6053      	str	r3, [r2, #4]
	//SEQUENCE OF ONE CHANNEL
	ADC1->SQR3 |= 4;
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <ADC_CONF+0xa0>)
 800026e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <ADC_CONF+0xa0>)
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	6353      	str	r3, [r2, #52]	; 0x34
	//CONTINUOUS MODE
	ADC1->CR2 |= ADC_CR2_CONT;
 8000278:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <ADC_CONF+0xa0>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <ADC_CONF+0xa0>)
 800027e:	f043 0302 	orr.w	r3, r3, #2
 8000282:	6093      	str	r3, [r2, #8]
	//28 CYCLES SAMPLE TIME
	ADC1->SMPR2 |= ADC_SMPR2_SMP4_1;
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <ADC_CONF+0xa0>)
 8000286:	691b      	ldr	r3, [r3, #16]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <ADC_CONF+0xa0>)
 800028a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028e:	6113      	str	r3, [r2, #16]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020000 	.word	0x40020000
 80002a4:	40012300 	.word	0x40012300
 80002a8:	40012000 	.word	0x40012000

080002ac <main>:

// ADC 1/3 -> PA3
uint16_t result = 0;

int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0

	//initialise_monitor_handles();
	ADC_CONF();
 80002b0:	f7ff ffaa 	bl	8000208 <ADC_CONF>
	ADC_START;
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <main+0x24>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <main+0x24>)
 80002ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002be:	6093      	str	r3, [r2, #8]

	while(1){
		//WAIT UNTIL CONVERSION ENDS
		while(CONV_IN_PROG){
 80002c0:	bf00      	nop
			//WAIT
		}
		result = ADC1->DR;
 80002c2:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <main+0x24>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	b29a      	uxth	r2, r3
 80002c8:	4b02      	ldr	r3, [pc, #8]	; (80002d4 <main+0x28>)
 80002ca:	801a      	strh	r2, [r3, #0]
		while(CONV_IN_PROG){
 80002cc:	e7f8      	b.n	80002c0 <main+0x14>
 80002ce:	bf00      	nop
 80002d0:	40012000 	.word	0x40012000
 80002d4:	2000001c 	.word	0x2000001c

080002d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d8:	480d      	ldr	r0, [pc, #52]	; (8000310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e2:	490d      	ldr	r1, [pc, #52]	; (8000318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <LoopForever+0xe>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f8:	4c0a      	ldr	r4, [pc, #40]	; (8000324 <LoopForever+0x16>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000306:	f000 f811 	bl	800032c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030a:	f7ff ffcf 	bl	80002ac <main>

0800030e <LoopForever>:

LoopForever:
  b LoopForever
 800030e:	e7fe      	b.n	800030e <LoopForever>
  ldr   r0, =_estack
 8000310:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000318:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800031c:	08000394 	.word	0x08000394
  ldr r2, =_sbss
 8000320:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000324:	20000020 	.word	0x20000020

08000328 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC_IRQHandler>
	...

0800032c <__libc_init_array>:
 800032c:	b570      	push	{r4, r5, r6, lr}
 800032e:	4d0d      	ldr	r5, [pc, #52]	; (8000364 <__libc_init_array+0x38>)
 8000330:	4c0d      	ldr	r4, [pc, #52]	; (8000368 <__libc_init_array+0x3c>)
 8000332:	1b64      	subs	r4, r4, r5
 8000334:	10a4      	asrs	r4, r4, #2
 8000336:	2600      	movs	r6, #0
 8000338:	42a6      	cmp	r6, r4
 800033a:	d109      	bne.n	8000350 <__libc_init_array+0x24>
 800033c:	4d0b      	ldr	r5, [pc, #44]	; (800036c <__libc_init_array+0x40>)
 800033e:	4c0c      	ldr	r4, [pc, #48]	; (8000370 <__libc_init_array+0x44>)
 8000340:	f000 f818 	bl	8000374 <_init>
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	10a4      	asrs	r4, r4, #2
 8000348:	2600      	movs	r6, #0
 800034a:	42a6      	cmp	r6, r4
 800034c:	d105      	bne.n	800035a <__libc_init_array+0x2e>
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f855 3b04 	ldr.w	r3, [r5], #4
 8000354:	4798      	blx	r3
 8000356:	3601      	adds	r6, #1
 8000358:	e7ee      	b.n	8000338 <__libc_init_array+0xc>
 800035a:	f855 3b04 	ldr.w	r3, [r5], #4
 800035e:	4798      	blx	r3
 8000360:	3601      	adds	r6, #1
 8000362:	e7f2      	b.n	800034a <__libc_init_array+0x1e>
 8000364:	0800038c 	.word	0x0800038c
 8000368:	0800038c 	.word	0x0800038c
 800036c:	0800038c 	.word	0x0800038c
 8000370:	08000390 	.word	0x08000390

08000374 <_init>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr

08000380 <_fini>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr
